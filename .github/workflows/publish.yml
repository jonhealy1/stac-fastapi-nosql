name: Publish

on:
  push:
    tags:
      - "v*.*.*" # Triggers when a tag like 'v3.2.0' is pushed

jobs:
  build-and-publish-pypi:
    name: Build and Publish Packages
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build and publish stac-fastapi-core
        working-directory: stac_fastapi/core
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          # Build package
          python setup.py sdist bdist_wheel

          # Publish to PyPI
          twine upload dist/*

      - name: Build and publish stac-fastapi-elasticsearch
        working-directory: stac_fastapi/elasticsearch
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          # Build package
          python setup.py sdist bdist_wheel

          # Publish to PyPI
          twine upload dist/*

      - name: Build and publish stac-fastapi-opensearch
        working-directory: stac_fastapi/opensearch
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          # Build package
          python setup.py sdist bdist_wheel

          # Publish to PyPI
          twine upload dist/*

  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Elasticsearch image
        id: meta-es
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/stac-fastapi-es
          tags: |
            type=raw,value=latest
            type=ref,event=tag

      - name: Build Elasticsearch image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: dockerfiles/Dockerfile.ci.es
          platforms: linux/amd64
          push: false
          load: true
          tags: stac-fastapi-es:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Elasticsearch image
        run: |
          docker run -d --name stac-es \
            -e APP_HOST=0.0.0.0 \
            -e APP_PORT=8080 \
            -e ES_HOST=localhost \
            -e ES_PORT=9200 \
            stac-fastapi-es:test
          
          timeout=120
          while [ $timeout -gt 0 ]; do
            if docker inspect stac-es --format='{{.State.Health.Status}}' | grep -q 'healthy'; then
              echo "Container is healthy"
              break
            fi
            if [ $timeout -eq 0 ]; then
              echo "Health check failed"
              docker logs stac-es
              docker stop stac-es
              docker rm stac-es
              exit 1
            fi
            sleep 5
            timeout=$((timeout-5))
          done
          
          docker stop stac-es
          docker rm stac-es

      - name: Push Elasticsearch image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: dockerfiles/Dockerfile.ci.es
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-es.outputs.tags }}
          labels: ${{ steps.meta-es.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for OpenSearch image
        id: meta-os
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/stac-fastapi-os
          tags: |
            type=raw,value=latest
            type=ref,event=tag

      - name: Build OpenSearch image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: dockerfiles/Dockerfile.ci.os
          platforms: linux/amd64
          push: false
          load: true
          tags: stac-fastapi-os:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test OpenSearch image
        run: |
          docker run -d --name stac-os \
            -e APP_HOST=0.0.0.0 \
            -e APP_PORT=8080 \
            -e OS_HOST=localhost \
            -e OS_PORT=9200 \
            stac-fastapi-os:test
          
          timeout=120
          while [ $timeout -gt 0 ]; do
            if docker inspect stac-os --format='{{.State.Health.Status}}' | grep -q 'healthy'; then
              echo "Container is healthy"
              break
            fi
            if [ $timeout -eq 0 ]; then
              echo "Health check failed"
              docker logs stac-os
              docker stop stac-os
              docker rm stac-os
              exit 1
            fi
            sleep 5
            timeout=$((timeout-5))
          done
          
          docker stop stac-os
          docker rm stac-os

      - name: Push OpenSearch image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: dockerfiles/Dockerfile.ci.os
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-os.outputs.tags }}
          labels: ${{ steps.meta-os.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max